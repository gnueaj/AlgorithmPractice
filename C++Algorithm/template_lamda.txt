ㆍ템플릿
- 매개 변수 타입만 다른 중복된 함수를 일반화시킨 틀(template)을 만들어 낼 수 있음
- 함수나 클래스 코드를 찍어내듯이 생산할 수 있도록 일반화(generic)시키는 도구
- 제네릭 타입이란 C++의 기본 타입이 아니며, 이들을 일반화시킨 새로운 타입임

ex)
template <Typename T> // 템플릿선언 <제네릭 타입(typename, 또는 class) T>
void myswap (T& a, T& b){ // 제네릭 타입이 T로 동일하므로 매개 변수의 타입이 동일해야 함
    T tmp;
    tmp = a;
    a = b;
    b = tmp;
}

ex)
template <class T>
class MyStack{
    int tos;
    T data[100];
public:
    MyStack();
    void push(T element);
    T pop();
};

template <class T>
MyStack<T>::MyStack(){
    tos = -1;
}

template <class T>
void MyStack<T>::push(T element){
    if(tos == 99){
        cout << "stack full";
        return;
    }
    tos++;
    data[tos] = element;
}

template <class T>
T MyStack<T>::pop(){
    T retData;
    if(tos == -1){
        cout << "stack empty";
        return 0;
    }
    retData = data[tos--];
    return retData;
}

int main(){
    MyStack<int> iStack;
    MyStack<double> dStack;
    MyStack<char> *p = new MyStack<char>();
}

ㆍauto
vector<int>::iterator it;
for(it = v.begin(); it != v.end(); it++)

-> for(auto it = v.begin(); it != v.end(); it++)

ㆍ람다 대수와 람다식
- 이름 없는 함수를 람다식이라고 부름 ex) (x, y) -> x + y
- 람다식은 캡쳐리스트[], 매개변수리스트(), 리턴타입->(생략가능), 함수바디{}의 4부분으로 구성됨.
ex) [](int x, int y) -> int { return x + y; } (2, 3);