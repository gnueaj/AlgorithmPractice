7. 튜플과 리스트
- 튜플은 불변하며, 리스트는 가변함

[튜플]
ㆍ한 요소 이상의 튜플을 만들기 위해서는 각 요소 뒤에 콤마를 붙이며, 정의시에는 괄호가 필요 없음
- 튜플이 한개의 데이터를 가질 때는 콤마를 붙여 줘야 함
ex) empty_tuple = (), one_marx = ('Groucho',), marx_tuple = 'Groucho', 'Chico', 'Harpo'
- []를 이용한 인덱싱과 슬라이싱이 가능함

ㆍ한 번에 여러 변수를 할당할 수 있음(튜플 언패킹)
ex) a, b, c = marx_tuple

ㆍ값을 교환하기 위한 튜플 사용
ex) a = 'string1'
    b = 'string2'
    a, b = b, a

ㆍ생성하기: tuple(mark_list)
ㆍ결합하기: +
ex)('Groucho',) + ('Chico', 'Harpo')
ㆍ복제하기: *
ex)('Groucho',) * 3
ㆍ비교하기: =, >, < 등 사용가능
ㆍ수정하기
 - 불변 객체이므로 기존 튜플을 변경할 수 없으나, 문자열과 같이 튜플을 결합하여 새 튜플을 만들 수 있음


[리스트]
- 데이터를 순차적으로 파악하는데 유용하며, 내용과 순서가 바뀔 수 있음
- 문자열과 같이 오프셋으로 특정 값을 추출할 수 있으며 리스트의 슬라이스도 리스트임
- 콤마로 구분하며, 대괄호로 둘러싸여있음
ex) first_names = ['Graham', 'John', 'Terry', 'Terry']

ㆍ생성하기
ex) emtpy_list = list() # []
    list('cat') # ['c', 'a', 't']
    list(('ready', 'fire', 'aim')) # ['ready', 'fire', 'aim']

ㆍ분할 생성하기
- 문자열을 구분자 단위로 분할하여 리스트를 생성함
ex) day = '9/19/2019'
    day.split('/') # ['9', '19', '2019']

ㆍ뒤집기
ex) marxes.reverse() # 리스트를 변경하지만 값을 반환하지는 않음

ㆍ리스트 끝에 항목 추가하기
ex) marxes.append('Zeppo')

ㆍ원하는 위치에 항목 추가하기
ex) marxes.insert(2, 'Gummo')

ㆍ복제하기
ex) ["blah"] * 3 # ['blah', 'blah', 'blah']

ㆍ병합하기
- marxes 뒤에 others를 병합함
- append를 사용하면 병합하지 않고 하나의 리스트로 추가됨
ex) marxes.extend(others)

ㆍ슬라이스로 항목 바꾸기
ex) numbers[1:3] = [8, 9]
    numbers[1:3] = [7, 8, 9] 

ㆍ삭제하기
- del은 리스트 메서드가 아니라 파이썬 구문임
ex) del marxes[-1]
- 위치를 모를 경우 remove()로 삭제 가능
ex) marxes.remove('Groucho')
- 항목을 가져오는 동시에 삭제
ex) marxes.pop()  # 리스트의 테일을 반환
    marxes.pop(0) # 리스트의 헤드를 반환
- 모든 항목 삭제
ex) marxes.clear()

ㆍ값으로 오프셋 찾기
ex) marxes.index('Groucho') 

ㆍ존재여부 확인
ex) 'Groucho' in marxes # True

ㆍ특정 항목의 개수 세기
ex) marxes.count('Harpo')

ㆍ정렬하기
- sort()는 리스트 자체를 내부적으로 정렬함 ex) marxes.sort((reverse = True)) 
- sorted()는 리스트의 정렬된 복사본을 반환함 ex) sorted_marxes = sorted(marxes)

ㆍ항목 개수 얻기 
ex) len(marxes)

ㆍ할당하기: =
- 한 리스트를 변수 두 곳에 할당했을 때, 한 리스트를 변경하면 다른 리스트도 같이 변경됨

ㆍ복사하기
- 복사본을 만들며 아무런 참조가 없음
ex) a = [1, 2, 3]
    b = a.copy()
    c = list(a)
    d = a[:]
- 리스트 값이 리스트, 튜플, 딕셔너리와 같은 가변 객체일 경우 참조되므로 deepcopy를 사용해야 함
ex) b = copy.deepcopy(a)

ㆍ여러 시퀀스 순회하기
ex) for a, b, c, d in zip(as, bs, cs, ds):
    print(a, b, c, d)
- 여러 시퀀스 중 가장 짧은 시퀀스가 완료되면 zip()은 멈춤
- zip()에 의해 반환되는 값은 튜플이나 리스트가 아니라 하나로 반환될 수 있는 순회 가능한 값임
ex) list(zip(english,french)) # [('Monday', 'Lundi'), ('Tuesday', 'Mardi')]

ㆍ리스트 컴프리핸션 [표현식 for 항목 in 순회 가능한 객체 if 조건]
- number_list = []
  for number in range(1, 6):
      if number % 2 == 1:
          number_list.append(number)
  위와 같이 생성할 수 있으나, 리스트 컴프리헨션을 사용해서 리스트를 만드는 것이 조금 더 파이써닉한 방법임
  ex) number_list = [number for in range(1, 6) if number % 2 == 1]
  루프가 중첩 될 수 있는 것 처럼 하나 이상의 for 절을 사용할 수 있음
  ex) rows = range(1, 4)
      cols = range(1, 3)
        cells = [(row, col) for row in rows for col in cols] 
        # [(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2)]

ㆍ리스트의 리스트
- 리스트는 리스트 뿐만 아니라 다른 타입의 요소도 포함할 수 있음

[정리]
- 튜플은 리스트의 append(), insert()등과 같은 함수가 없고, 튜플을 생성한 후에는 수정할 수 없음
- 튜플은 더 적은 공간을 사용하며, 항목이 손상될 염려가 없고, 딕셔너리 키로 활용할 수 있음
- 네임드튜플은 객체의 단순한 대안이 될 수 있음
- 일반적으로 리스트와 딕셔너리를 더 많이 사용함
- 튜플 컴프리헨션은 없음

