ㆍ익명 함수: lambda
- 람다 함수는 단일 문장으로 표현되는 익명 함수
ex) def edit_story(words, func)
        for word in words:
            print(func(word))

    stairs = ['thud', 'meow', 'thud', 'hiss']
    
    def enliven(word):
        return word.capitalize() + '!'
    
    edit_story(stairs, enliven)
    -> edit_story(stairs, lambda word: word.capitalize() + '!')
- 람다는 인수를 취하지 않거나 콤마로 구분된 인수를 취하며 콜론 이후에 함수를 정의함

ㆍ제너레이터
- 시퀀스를 생성하는 객체 ex) 일련의 정수를 생성하는 range()
- 제너레이터는 한 번만 순회할 수 있고 모든 값을 기억하지 않음
- 큰 시퀀스를 생성하고 제너레이터 컴프리헨션에 대한 코드가 아주 길다면 제너레이터 함수를 사용
ex) def my_range(first=0, last=10, step=1)
        number = first
        while number < last:
            yield number # 제너레이터이므로 return문으로 값을 반환하지 않고 yield문으로 반환
            number += step
    ranger = my_range(1, 5) # my_range는 일반 함수이며 ranger는 제너레이터 객체
    for x in ranger: # 순회를 마친 제너레이터를 다시 순회한다면 아무것도 반환하지 않음
        print(x)

ㆍ제너레이터 컴프리헨션
- 괄호로 묶어서 사용하며, 제너레이터 함수의 축약 버전임
- 안보이게 yield문을 실행하고, 제너레이터 객체를 반환
ex) genobj = (pair for pair in zip(['a', 'b'], ['1', '2']))
    for thing in genobj:
        print(thing)
    # ('a', '1')
      ('b', '2')

ㆍ데커레이터
- 하나의 함수를 취해서 또 다른 함수를 반환하는 함수
- *args, **kwargs, 내부함수, 함수인수를 사용함
ex) def document_it(func):
        def new_function(*args, **kwargs):
            print('Running function:', func.__name__)
            print('Positional arguments:', args)
            print('keyword arguments:', kwargs)
            result = func(*args, **kwargs)
            print('Result:', result)
            return result
        return new_function

    # 데커레이터 수동 할당
    def add_ints(a, b):
        return a + b

    cooler_add_ints = document_it(add_ints)
    print(cooler_add_ints(3, 5))
    
    # @데커레이터_이름 추가
    @document_it
    def add_ints(a, b):
        return a + b

    print(add_ints(3, 5))

   #Running function: add_ints
    Positional arguments: (3, 5)
    keyword arguments: {}
    Result: 8
    8
- 데커레이터는 여러개를 가질 수 있으며, 함수에서 가장 가까운 데커레이터부터 실행됨

ㆍ네임스페이스와 스코프
- 네임스페이스는 특정 이름이 유일하고, 다른 네임스페이스에서의 같은 이름과 관계가 없는 것을 말함
- 각 함수는 자신의 네임스페이스를 정의하며, 메인 프로그램의 변수 x와 함수 내의 변수 x는 다른 것을 참조함
    (id()를 사용하여 각 변수의 고유번호를 확인할 수 있음)
- 함수 내에서 전역 변수의 값을 얻어서 바꾸려 하면 에러가 발생함
- 함수 내의 지역변수가 아닌 전역 변수를 접근하기 위해 global 키워드를 사용해 전역 변수의 접근을 명시해야 함
- 파이썬은 네임스페이스의 내용을 접근하기 위해 두 가지 함수를 제공함
    1. locals() 함수는 로컬 네임스페이스의 내용이 담긴 딕셔너리를 반환함 ex) locals: {'animal': 'wombat'}
    2. globals() 함수는 전역 네임스페이스의 내용이 담긴 딕셔너리를 반환함 
        - 로컬 네임스페이스와 달리 글로벌 네임스페이스에는 전역변수와 다른 여러 가지가 포홤되어 있음

ㆍ함수 이름과 docstring은 각각 function.__name__, function.__doc__에 포함되어 있으며 메인 프로그램은 __main__으로 할당 되어 있음

ㆍ재귀 함수
- 파이썬에서 재귀가 깊다면 예외가 발생함
- 다음과 같이 깊이 제한을 설정 가능함
ex) import sys
    sys.getrecursionlimit(1500)
- yield from 을 사용하면 리스트를 바로 제너레이터로 변환할 수 있음
ex) def flatten(lol):
        for item in lol:
            if isinstance(item, list):
                yield from flatten(item)
            elseL
                yield item

ㆍ예외처리
- 에러가 예상되는 코드에 try문을 사용하고, 그 에러를 처리하기 위해 except문을 사용함
- 인수가 없는 except문은 모든 예외 타입을 잡음
- 특정 예외에 대한 세부사항을 얻고 싶다면 [except 예외 타입 as 이름]과 같이 작성하여 이름에서 예외 객체 전체를 얻음 
ex) short_list = [1,2,3]
    while True:
        value = input('Position [q to quit]?')
        if value == 'q':
            break
        try:
            position = int(value)
            print(short_list[position])
        except IndexError as err:
            print('Bad index:', position)
        except Exception as other:
            print('Something else broke:', other)

ㆍ예외 만들기
- 모든 예외는 파이썬 표준 라이브러리에 정의되어 있으며 우리가 만든 특별한 예외를 처리하기 위해 예외 유형을 정의할 수 있음
- 예외는 클래스이며, Exception 클래스의 자식임
ex) class UppercaseException(Exception):
        pass # UppercaseException에 대한 행동 정의

    words = ['eenie', 'meenie', 'miny', 'MO']
    for word in words:
        if word.isupper():
            raise UppercaseException(word) # raise 로 예외 발생시키기
