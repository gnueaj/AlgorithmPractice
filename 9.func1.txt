9. 함수
ㆍdef와 함수 이름, 괄호를 입력하며 콜론을 붙임
ㆍ이름의 첫 글자는 영문자나 언더바를 사용해야 하며, 영문자, 숫자, 언더바만 사용할 수 있음
ex) def run_something_with_args(func, arg1, arg2):
        func(arg1, arg2)
ㆍNone
- 아무것도 없다는 것을 뜻하는 파이썬의 특별한 값임
- False와 None을 구분하기 위해 is 연산자를 사용함
ex) thing = None
    if thing is None:
        print("It's some thing")
- 0, 0.0, '', [], (), {}, set() 등은 모두 False임

ㆍ키워드 인수
- 인수의 가장 익숙한 유형은 값을 순서대로 상응하는 매개변수에 복사하는 위치 인수
- 위치 인수의 단점은 각 위치의 의미를 알아야 하는 것임
- 혼란을 피하기 위해 정의와 다른 순서로 매개 변수에 상응하는 이름을 인수에 저장할 수 있음
ex) def menu(wine, entree, dessert):
        return {'wine': wine, 'entree': entree, 'dessert': dessert}
    menu(entree='beef', dessert='bagel', wine='bordeaux')
    {'wine': 'bordeaux', 'entree': 'beef', 'dessert': 'bagel'}
- 위치 인수와 키워드 인수를 섞어쓸 수 있음
- 매개 변수에 기본값을 지정할 수 있으며, 호출자가 대응하는 인수를 제공하지 않으면 기본값을 사용함
ex) def menu(wine, entree, dessert='pudding'):
        return {'wine': 'chardonnay', 'entree': 'chicken', 'dessert': 'pudding'}
- 기본 인수는 함수가 실행될 때 계산되지 않고, 함수를 정의할 때 계산된다.
ex) def buggy(arg, result = []):
        result.append(arg)
        print(result) # buggy('a') -> ['a'], buggy('b') -> ['a','b']
    
    def works(arg):
        result = []
        result.append(arg)
        return result # works('a') -> ['a'], works('b') -> ['b']

ㆍ위치 인수 분해하기/모으기
- 파이썬에는 포인터가 없으며, 매개변수에 애스터리스크(*)를 사용하면 위치 인수 변수를 튜플로 묶음
ex) def print_args(*args):
        print('Positional tuple:', args)
    
    print_args(3, 2, 1, 'wait!', 'uh...')
    Positional tuple: (3, 2, 1, 'wait!', 'uh...')
    
    args = (2, 5, 7, 'x')
    print_args(args) # Positional tuple: ((2, 5, 7, 'x'),)
    print_args(*args) # Positional tuple: (2, 5, 7, 'x')
- 인수 맨 끝에 *args를 써서 나머지 인수를 모두 취하게 할 수 있음
- 함수 호출 또는 정의에서만 *구문을 사용하며, 관용적으로 *args를 사용함
- 위치 인수를 함수에 전달하고, 매개변수 *args로 수집하여 튜플 인수로 해석할 수 있음
- !함수 외부에서 *args는 튜플 인수를 쉼표로 구분된 위치 매개변수로 분해함
- !함수 내부에서 *args는 모든 위치의 인수를 단일 인수 튜플로 수집함

ㆍ키워드 인수 분해하기/모으기
- 키워드 인수를 딕셔너리로 묶기 위해 두 개의 애스터리스크를 사용할 수 있음
ex) def print_kwargs(**kwargs):
        print('Keyword arguments:', kwargs)

    >>> print_kwargs(wine='merlot', entree='mutton', dessert='macaron')
    Keyword arguments: {'dessert': 'macaron', 'wine': 'merlot', 'entree': 'mutton'}
- !함수 외부에서 **kwargs는 딕셔너리 kwargs를 '이름=값' 인수로 분해함
- !함수 내부에서 **kwargs는 '이름=값' 인수를 단일 딕셔너리 매개변수 kwargs에 모음

ㆍ키워드 전용 인수
- 파이썬 3에서는 키워드 전용 인수를 지정하여 값을 위치적으로 제공하지 않고 이름=값으로 제공해야함
- 단일* 는 start 및 end의 기본값을 사용하고 싶지 않은 경우 명명된 인수로 제공해야 함을 의미
ex) def print_data(data, *, start = 0, end = 100):
        for value in (data[start:end]):
                print(value)
    data = ['a', 'b', 'c', 'd', 'e','f']
    print_data(data, start = 4)
    # e
      f

ㆍ가변/불변 인수
- 인수가 가변 객체인 경우 해당 매개변수를 통해 함수 내부에서 값을 변경할 수 있음

ㆍ독스트링(docstring)
- 함수 바디 시작부분에 문자열을 포함시켜 함수 정의에 문서를 붙을 수 있음
ex) def echo(anything):
        'echo returns its input argument'
        return anything
   
    def print_if_true(thing, check):
    '''
    Prints the first argument if a second argument is true.
    The operation is:
        1. Check whether the *second* argument is true.
        2. If it is, print the *first* argument.
    '''
    if check: 
        print(thing)

    >>> help(echo)
    Help on function echo in module __main__:

    echo(anything)
        echo returns its input argument

    >>> print(echo.__doc__)
    echo returns its input argument

ㆍ내부함수
ex) def knights(saying):
        def inner(quote):
            return "We are the knights who say: '%s'" % quote
        return inner(saying)
    >>> knights('Ni!') # "We are the knights who say: 'Ni!'"

ㆍ클로저
- 다른 함수에 의해 동적으로 생성되며 외부 함수로부터 생성된 변수값을 변경하고 저장할 수 있는 함수
ex) def knights2(saying):
        def inner2():
            return "We are the knights who say: '%s'" % saying
        return inner2
    >>> a = knights2('Duck')
    >>> b = knights2('Hasenpfeffer')
    >>> a()
    "We are the knights who say: 'Duck'"
    >>> b()
    "We are the knights who say: 'Hasenpfeffer'"
    # 이들을 호출하면 knights2()함수에 전달되어 사용된 saying을 기억함