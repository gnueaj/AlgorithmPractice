ㆍ코딩 스타일
- https://google.github.io/styleguide/pyguide.html (구글 파이썬 스타일 가이드)
- https://peps.python.org/pep-0008/ (PEP8)

ㆍ변수명과 주석
def numMatchingSubseq(self, S: str, words: List[str]) -> int:
    matched_count = 0

    for word in words:
        pos = 0
        for i in range(len(word)):
            # Find matching position for each character.
            found_pos = S[pos:].find(word[i])
            if found_pos:
                matched_count -= 1
                break
            else: # If found, take step position forward.
                pos += found_pos + 1
        matched_count += 1
    
    return matched_count
- PEP 8 문서 기준에 따라 스네이크 케이스로 작성
- 영어로 작성하는 것에 부담이 없어야 함

ㆍ리스트 컴프리헨션
- 파이썬의 매우 강력한 기능 중 하나로, 대표적인 특징 중 하나임
- 지나치게 남발하게 되면 가독성을 떨어트리는 요인이 됨
- 역할 별 줄 구분을 하면 가독성이 높아지고 이해하기 쉬워짐
strls = [
    str1[i:i + 2].lower() for i in range(len(str1) - 1)
    if re.findall('[a-z]{2}', str1[i:i + 2].lower())
]

ㆍ구글 파이썬 스타일 가이드
- 기본 인수는 함수를 정의할 때 계산되므로 기본 값으로 가변 객체를 사용하지 않아야 함
ex) def foo(a, b = []):
        ...
    def foo(a, b: Mapping = {}):
        ...
- 대신 불변 객체를 사용하여 None을 할당하는 것도 좋은 방법임
ex) def foo(a, b = None):
        if b is None:
            b = []
    def foo(a, b: Optional[Sequence] = None):
    if b is None:
        b = []
- True, False를 판별할 때는 암시적인 방법이 더 간결하고 가독성이 높음
ex) if not users: # if len(users) == 0:
        ...
    if foo: # if foo != []:
        ...
    
ㆍ
ㆍ
ㆍ
ㆍ
ㆍ
ㆍ
ㆍ
