[인공지능과 머신러닝, 딥러닝]
ㆍ인공지능
- 사람처럼 학습하고 추론할 수 있는 지능을 가진 시스템을 만드는 기술

ㆍ머신러닝
- 규칙을 프로그래밍하지 않아도 자동으로 데이터에서 규칙을 학습하는 알고리즘을 연구하는 분야

ㆍ딥러닝
- 인공 신경망이라고도 하며, 텐서플로와 파이토치가 대표적인 라이브러리

ㆍ산점도 그리기: scatter()
import matplotlib.pyplot as plt #과학계산용 그래프를 그리는 matplotlib 패키지

plt.scatter(bream_length, bream_weight)
plt.scatter(smelt_length, smelt_weight)
plt.xlabel('length')
plt.ylabel('wetight')
plt.show()

ㆍk-최근접 이웃(k-Nearest Neighbors) 알고리즘
from sklearn.neighbors import KNeighborsClassifier # k-Nearest Neighbors알고리즘을 구현한 클래스

length = bream_length + smelt_length
weight = bream_weight + smelt_weight

fish_data = [[l, w] for l, w in zip(length, weight)] # 사이킷런 패키지 이용을 위해 2차원 리스트 만들기 
fish_target = [1] * 35 + [0] * 14 # 어떤 것이 bream인지 알려주는 정답 리스트 만들기

kn = KNeighborsClassifier() # KNeighborsClassifier클래스의 객체 만들기
kn.fit(fish_data, fish_target) 
''' fit()을 사용하여 도미를 찾기 위한 기준 학습시키기(훈련)
    KNeighborsClassifier클래스의 _fit_X속성에는 fish_data, _fit_Y속성에는 fish_target을 가지고 있음'''
print(kn.score(fish_data, fish_target)) # 모델 평가를 위한 메서드, 0 ~ 1 반환
print(kn.predict([[30,600]])) # [30, 600]을 가진 데이터가 도미인지 빙어인지 예측

- 새로운 데이터에 대해 예측할 때는 가장 가까운 직선거리에 어떤 데이터가 있는지 살핌
- 데이터가 아주 많은 경우 사용하기 어려움
- 실제로 k-Nearest Neighbors 알고리즘은 무언가 훈련되는게 없는 셈이며, 가장 가까운 몇 개의 데이터를 활용함
- 기본값은 5이며, n_neighbors 매개변수로 바꿀 수 있음 
kn = KNeighborsClassifier(n_neighbors=49)



ㆍ
ㆍ
ㆍ
ㆍ
ㆍ
ㆍ
ㆍ
ㆍ
ㆍ
ㆍ
ㆍ
