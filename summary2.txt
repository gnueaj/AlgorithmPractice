5. 텍스트문자열
- 다른 언어와 달리 파이썬의 문자열은 불변이며, 문자열을 다른 곳으로 복사해 변경할 수는 있음
- 작은따옴표와 큰따옴표 모두 사용가능
- 작은따옴표 안에 큰따옴표를 쓰거나 반대도 가능
- \'와 \"를 사용하여 따옴표 표현, \\를 사용하여 백슬래시 표현
- 세 개의 작은따옴표 안에 여러 줄이 있다면 문자열 끝에 들어 있는 라인 끝 문자가 보존됨
- print()는 각 인수 사이에 공백을, 마지막에 줄바꿈 문자를 붙임 
    ex) print('GIve', "us", '''some''', """space""") -> Give us some space
- +연산자를 이용하여 문자열 변수를 결합, * 연산자를 이용하여 문자열을 복제
- 가장 오른쪽의 offset은 -1


[문자열 메소드]
len(str) - 문자열 길이 반환
str(1.0e4) = '1000.0' - 문자열 타입으로 변환 
name.replace('a','b'(, 횟수)) - 문자열을 대체하여 반환, 원본은 바뀌지 않음
letters[start : end ( : step)] - slice를 사용하여 step만큼 건너뛰며 start부터 end - 1 까지 추출
                               - start 또는 end는 생략 시 양 끝을 나타냄
                               - end 오프셋에 -3을 지정하면 -4번째 문자가 됨에 주의
name.split(',') - 구분자를 기준으로 하나의 문자열을 작은 문자열들의 리스트로 나눔 
crypto_list = ['Yeti', 'Bigfoot, 'Loch Ness Monster']
crypto_string = ', '.join(crypto_list)
print('Found:', crypto_string) -> Found: Yeti, Bigfoot, Loch Ness Monster
- 문자열 리스트를 하나의 문자열로 결합
strip,lstrip,rstrip('.') - 양쪽 끝의 문자 제거, 생략시 공백문자(' ', '\t', '\n')제거 
find(),index() - 처음이나 끝에서 찾아서 오프셋 위치 반환, 찾지 못할 시 find()는 -1, index()는 예외 처리
count(word) - 부분 문자열 개수
upper,lower,title,capitalize,swapcase ...
center(space),ljust(space), rjust(space) - 지정한 공간에서 정렬


[문자열 포매팅]
ㆍ 옛 스타일(파이썬 2.3에서 지원)
 - format_string % data 형식 
    ex) print("%d%% %s" % (100, "jaeung")) -> 100% jaeung
 - 초기 '%' 문자, 정렬문자 +-, 최소 너비, . 문자를 통한 구분, 최대 문자 등의 옵션 존재

ㆍ 새 스타일(파이썬 2.6이상에서만 지원)
 - format_string.format(data) 형식
 - 포맷 문자열 {} 사용 
    ex) print('The {} is in the {}.'.format('woodchuck', 'lake'))
 - {}안에 숫자 또는 인수를 넣어 지정할 수 있음
 - 맨처음 ':', 채우기문자, 선택적 정렬 문자(<, >, ^), 부호 문자, 최소 너비, 최대 문자 옵션이 있음

ㆍ 최신 스타일 : f-문자열(파이썬 3.6이상에서만 지원)
 - 첫 인용 부호 앞에 문자 f 또는 F를 입력
 - 새 스타일의 포매팅과 같은 언어를 사용 가능
 - 변수 이름이나 식을 중괄호 안에 포함해 값을 문자열로 가져옴
    ex) print(f'The {thing.capitalize()} is in the {place:.^20}')
 - =를 통한 디버깅
    ex) print(f'{thing = :>4.4}')