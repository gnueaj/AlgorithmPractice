ㆍ리스트
- 순서대로 저장하는 시퀀스이자 변경 가능한 목록
- 입력 순서가 유지되며 내부적으로는 동적 배열(C++:vector, JAVA:ArrayList)로 구현됨
- 스택과 큐에서 사용 가능한 모든 연산을 함께 제공
- 주요 연산
len(a) # O(1)
a[i] # O(1)
a[i:j] # O(k), k = i-j
elem in a # O(n), elem 요소가 존재하는지 탐색
a.count(elem) # O(n), elem 요소의 개수를 리턴
a.index(elem) # O(n), elem 요소의 인덱스를 리턴
a.append(elem) # O(1), 리스트 마지막에 elem 요소를 추가
a.pop() # O(1), 리스트 마지막 요소를 추출, 스택의 연산
a.pop(0) # O(n), 리스트 첫번째 요소를 추출, 큐의 연산 (큐의 연산을 주로 사용한다면 deque을 권장)
del a[i] # O(n), i에 따라 다르며 최악의 경우 O(n)
a.sort() # O(nlogn), 팀소트를 사용하여 정렬하며 최선의 경우 O(n)에 실행
min(a), max(a) # O(n), 최솟값, 최댓값 계산
a.reverse() # O(n) 뒤집는다

- 활용 방법
a = list()
a = []
a = [1, 2, 3] # 선언

a.append(4) # [1, 2, 3, 4]
a.insert(3, 5) # [1, 2, 3, 5, 4]
a.append('안녕')
a.append(True) # [1, 2, 3, 5, 4, '안녕', True]

a[3] # 5
a[1:3] # [2, 3]
a[:3] # [1, 2 ,3]
a[4:] # [4, '안녕', True]
a[1:4:2] # [2, 5]

- 예외 처리
try:
    print(a[9])
except IndexError:
    print('존재하지 않는 인덱스')

- 삭제하기
del a[1] # 인덱스로 삭제
a.remove(3) # 값에 해당하는 요소 삭제
a.pop(3) # 삭제될 값을 리턴하고 삭제

- 특징
https://github.com/python/cpython
1) 연속된 공간에 요소를 배치하는 배열의 장점과 다양한 타입을 연결해 배치하는 연결 리스트의 장점을 모두 취함
2) CPython에서 리스트는 요소에 대한 포인터 목록을 가지는 구조체이며 요소를 조작하면 ob_item의 사이즈를 조절
3) 파이썬은 모든 것이 객체이며, 리스트는 이들 객체에 대한 포인터 목록을 관리하는 형태로 구현되어 있음
3) 연결 리스트에 대한 포인터 목록을 배열 형태로 관리하고 있어 배열과 연결 리스트를 합친 듯이 강력함

ㆍ딕셔너리
- 키/값 구조로 이뤄져있으며, 파이썬 3.7부터 입력 순서가 유지되고 내부적으로 해시 테이블로 구현됨
- C++의 unordered_map, 자바의 Hashmap이 해시 테이블 구조임
- 인덱스를 숫자로만 지정할 수 있는 리스트와 달리 딕셔너리는 문자를 포함해 다양한 타입을 키로 사용
- 입력과 조회 모두 O(1)에 가능하지만 최악의 경우 O(n)이 될 수 있음
len(a) # O(1), 요소 개수 리턴
a[key] # O(1)
a[key] = value # O(1), 키/값 삽입
key in a # O(1), 키의 존재 확인

- 활용 방법
1) 선언
a = dict()
a = {}

a = {'key1':'value1', 'key2':'value2'}
a['key3'] = 'value3'

2) 예외 처리
try:
    print(a['key4'])
except KeyError:
    print('존재하지 않는 키') # 존재하지 않는 키가 있을 경우 예외 처리

if 'key4' in a:
    print('존재하는 키')
else:
    print('존재하지 않는 키')

3) 조회
for k, v in a.items():
    print(k, v)

4) 삭제
del a['key1']

ㆍ딕셔너리 모듈
1) defaultdict
- 존재하지 않는 키를 조회할 경우 디폴트 값을 기준으로 해당 키에 대한 딕셔너리 아이템을 생성
a = collections.defaultdict(int)
a['A'] = 5
a['B'] = 4
a['C'] += 1
defaultdict(<class 'int'>, {'A': 5, 'B': 4, 'C': 1})

2) Counter
- 아이템에 대한 개수를 계산해 딕셔너리(collections.Counter)로 리턴
a = [1, 2, 3, 4, 5, 5, 5, 6, 6]
b = collections.Counter(a)
>>> b
Counter({5: 3, 6: 2, 1: 1, 2: 1, 3: 1, 4: 1})
>>> b.most_common(2)
[(5, 3), (6, 2)]

3) OrderedDict
- 대부분의 언어에서 해시 테이블을 이용한 자료형은 입력 순서가 유지되지 않음
- 파이썬 3.6이하에서도 마찬가지였으며, 입력 순서가 유지되는 OrderedDict라는 별도의 객체를 제공함
>>> collections.OrderedDict({'banana': 3, 'apple': 4, 'pear': 1, 'orange': 2})
OrderedDict([('banana', 3), ('apple', 4), ('pear', 1), ('orange', 2)])

ㆍ기호를 통한 타입 선언
type([]) # list
type(()) # tuple
type({}) # dict
type({1}) # set, 키의 존재 유무로 딕셔너리와 다름